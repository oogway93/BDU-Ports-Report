package main

import (
	"fmt"
)

// getPenTestCommands returns a list of pentest commands for specific service and port
func getPenTestCommands(port int, service string, targetIP string) []string {
	commands := make([]string, 0)

	// Common commands for all services
	commands = append(commands,
		fmt.Sprintf("nmap -sV -sC -p%d %s", port, targetIP),
		fmt.Sprintf("nmap -sV -sC -sS -p%d %s", port, targetIP),
		fmt.Sprintf("nmap -sV -sC -sU -p%d %s", port, targetIP),
		fmt.Sprintf("nc -v %s %d", targetIP, port),
		fmt.Sprintf("curl -v %s:%d", targetIP, port),
	)

	switch service {
	case "HTTP", "HTTPS", "HTTP-Proxy":
		commands = append(commands,
			// Basic scanning
			fmt.Sprintf("nikto -h http://%s:%d", targetIP, port),
			fmt.Sprintf("gobuster dir -u http://%s:%d -w /usr/share/wordlists/dirb/common.txt", targetIP, port),
			fmt.Sprintf("gobuster vhost -u http://%s:%d -w /usr/share/wordlists/dirb/common.txt", targetIP, port),

			// SQL injections
			fmt.Sprintf("sqlmap -u http://%s:%d --batch --random-agent", targetIP, port),
			fmt.Sprintf("sqlmap -u http://%s:%d --batch --random-agent --level 5 --risk 3", targetIP, port),

			// XSS and other web vulnerabilities
			fmt.Sprintf("xsstrike -u http://%s:%d", targetIP, port),
			fmt.Sprintf("wfuzz -c -w /usr/share/wordlists/wfuzz/Injections/All_attack.txt -d \"FUZZ\" http://%s:%d", targetIP, port),

			// Security headers check
			fmt.Sprintf("curl -I -X OPTIONS http://%s:%d", targetIP, port),
			fmt.Sprintf("curl -I -X TRACE http://%s:%d", targetIP, port),

			// HTTP methods testing
			fmt.Sprintf("curl -X PUT -d 'test' http://%s:%d/test.txt", targetIP, port),
			fmt.Sprintf("curl -X DELETE http://%s:%d/test.txt", targetIP, port),
		)
	case "SSH":
		commands = append(commands,
			// Brute force
			fmt.Sprintf("hydra -L /usr/share/wordlists/metasploit/unix_users.txt -P /usr/share/wordlists/metasploit/unix_passwords.txt ssh://%s:%d", targetIP, port),
			fmt.Sprintf("medusa -h %s -U /usr/share/wordlists/metasploit/unix_users.txt -P /usr/share/wordlists/metasploit/unix_passwords.txt -M ssh -n %d", targetIP, port),

			// Version and configuration check
			fmt.Sprintf("ssh -p%d -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null %s", port, targetIP),
			fmt.Sprintf("ssh -p%d -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -o PreferredAuthentications=keyboard-interactive %s", port, targetIP),

			// Weak keys check
			fmt.Sprintf("ssh-keyscan -p%d %s", port, targetIP),
			fmt.Sprintf("ssh -p%d -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -o PreferredAuthentications=publickey %s", port, targetIP),
		)
	case "FTP":
		commands = append(commands,
			// Brute force
			fmt.Sprintf("hydra -L /usr/share/wordlists/metasploit/unix_users.txt -P /usr/share/wordlists/metasploit/unix_passwords.txt ftp://%s:%d", targetIP, port),
			fmt.Sprintf("medusa -h %s -U /usr/share/wordlists/metasploit/unix_users.txt -P /usr/share/wordlists/metasploit/unix_passwords.txt -M ftp -n %d", targetIP, port),

			// Anonymous access
			fmt.Sprintf("ftp -p %s %d", targetIP, port),
			fmt.Sprintf("curl -v ftp://anonymous:anonymous@%s:%d", targetIP, port),

			// Transfer mode check
			fmt.Sprintf("ftp -p %s %d -A", targetIP, port),
			fmt.Sprintf("ftp -p %s %d -P", targetIP, port),
		)
	case "MySQL":
		commands = append(commands,
			// Brute force
			fmt.Sprintf("hydra -L /usr/share/wordlists/metasploit/unix_users.txt -P /usr/share/wordlists/metasploit/unix_passwords.txt mysql://%s:%d", targetIP, port),
			fmt.Sprintf("medusa -h %s -U /usr/share/wordlists/metasploit/unix_users.txt -P /usr/share/wordlists/metasploit/unix_passwords.txt -M mysql -n %d", targetIP, port),

			// Connection and verification
			fmt.Sprintf("mysql -h %s -P %d -u root -p", targetIP, port),
			fmt.Sprintf("mysql -h %s -P %d -u root -p -e 'SELECT VERSION();'", targetIP, port),

			// Vulnerability checks
			fmt.Sprintf("mysql -h %s -P %d -u root -p -e 'SHOW VARIABLES LIKE \"%version%\";'", targetIP, port),
			fmt.Sprintf("mysql -h %s -P %d -u root -p -e 'SHOW GRANTS;'", targetIP, port),
		)
	case "PostgreSQL":
		commands = append(commands,
			// Brute force
			fmt.Sprintf("hydra -L /usr/share/wordlists/metasploit/unix_users.txt -P /usr/share/wordlists/metasploit/unix_passwords.txt postgresql://%s:%d", targetIP, port),
			fmt.Sprintf("medusa -h %s -U /usr/share/wordlists/metasploit/unix_users.txt -P /usr/share/wordlists/metasploit/unix_passwords.txt -M postgres -n %d", targetIP, port),

			// Connection and verification
			fmt.Sprintf("psql -h %s -p %d -U postgres", targetIP, port),
			fmt.Sprintf("psql -h %s -p %d -U postgres -c 'SELECT version();'", targetIP, port),

			// Vulnerability checks
			fmt.Sprintf("psql -h %s -p %d -U postgres -c 'SELECT current_setting(''server_version'');'", targetIP, port),
			fmt.Sprintf("psql -h %s -p %d -U postgres -c '\\du'", targetIP, port),
		)
	case "SMTP":
		commands = append(commands,
			// Service check
			fmt.Sprintf("telnet %s %d", targetIP, port),
			fmt.Sprintf("nc -v %s %d", targetIP, port),

			// User enumeration
			fmt.Sprintf("smtp-user-enum -M VRFY -U /usr/share/wordlists/metasploit/unix_users.txt -t %s -p %d", targetIP, port),
			fmt.Sprintf("smtp-user-enum -M EXPN -U /usr/share/wordlists/metasploit/unix_users.txt -t %s -p %d", targetIP, port),

			// Open relay check
			fmt.Sprintf("swaks --to test@example.com --from test@%s --server %s:%d", targetIP, targetIP, port),
			fmt.Sprintf("swaks --to test@example.com --from test@%s --server %s:%d --tls", targetIP, targetIP, port),
		)
	case "Telnet":
		commands = append(commands,
			// Brute force
			fmt.Sprintf("hydra -L /usr/share/wordlists/metasploit/unix_users.txt -P /usr/share/wordlists/metasploit/unix_passwords.txt telnet://%s:%d", targetIP, port),
			fmt.Sprintf("medusa -h %s -U /usr/share/wordlists/metasploit/unix_users.txt -P /usr/share/wordlists/metasploit/unix_passwords.txt -M telnet -n %d", targetIP, port),

			// Connection and verification
			fmt.Sprintf("telnet %s %d", targetIP, port),
			fmt.Sprintf("nc -v %s %d", targetIP, port),

			// Version check
			fmt.Sprintf("telnet %s %d | grep -i version", targetIP, port),
		)
	case "DNS":
		commands = append(commands,
			// Basic queries
			fmt.Sprintf("dig @%s -p %d axfr", targetIP, port),
			fmt.Sprintf("dig @%s -p %d ANY", targetIP, port),

			// Zone enumeration
			fmt.Sprintf("dnsrecon -d %s -D /usr/share/wordlists/dnsmap.txt -t std --dnsserver %s:%d", targetIP, targetIP, port),
			fmt.Sprintf("dnsrecon -d %s -D /usr/share/wordlists/dnsmap.txt -t axfr --dnsserver %s:%d", targetIP, targetIP, port),

			// Vulnerability checks
			fmt.Sprintf("dig @%s -p %d chaos version.bind txt", targetIP, port),
			fmt.Sprintf("dig @%s -p %d chaos version.bind txt +tcp", targetIP, port),
		)
	case "SMB":
		commands = append(commands,
			// Enumeration
			fmt.Sprintf("smbclient -L //%s -p %d", targetIP, port),
			fmt.Sprintf("enum4linux -a %s -p %d", targetIP, port),

			// Vulnerability checks
			fmt.Sprintf("nmap -sV -sC -p%d %s --script smb-vuln*", port, targetIP),
			fmt.Sprintf("nmap -sV -sC -p%d %s --script smb-enum*", port, targetIP),

			// Version check
			fmt.Sprintf("smbclient -N -L //%s -p %d", targetIP, port),
			fmt.Sprintf("rpcclient -p %d %s", port, targetIP),
		)
	default:
		// For unknown services add basic commands
		commands = append(commands,
			fmt.Sprintf("nmap -sV -sC -p%d %s", port, targetIP),
			fmt.Sprintf("telnet %s %d", targetIP, port),
			fmt.Sprintf("nc -v %s %d", targetIP, port),
			fmt.Sprintf("curl -v %s:%d", targetIP, port),
		)
	}

	return commands
}
